class Result {
  
  static void mirror(Node node)
  {Node temp;
    if(node==null)return;
    else
      mirror(node.leftChild);
      mirror(node.rightChild);
    
    temp=node.leftChild;
   node.leftChild=node.rightChild;
   node.rightChild=node.leftChild;
  }
  static int check(Node a, Node b)
  {
    if (a == null && b == null) 
            return 1; 
        if (a != null && b != null
            && (check(a.leftChild, b.leftChild)==1) 
            && (check(a.rightChild, b.rightChild))==1) 
            return 1; 
  
        return 0; 
  }
  static int isFoldable(Node root) {
	
    if(root==null) return 1;
    mirror(root.leftChild);
    int res=check(root.leftChild,root.rightChild);
    mirror(root.leftChild);
    return res;
  }
}
class Node {
  int data; // data used as key value
  Node leftChild;
  Node rightChild;
  public Node()   {
    data=0;
  }
  public Node(int d)   {
    data=d;
  }
}
class Main {
  static void inOrder(Node root)
  {
    if (root != null)
    {
      inOrder(root.leftChild);
      System.out.print(root.data + " ");
      inOrder(root.rightChild);
    }
  }
  static Node insertLevelOrder(int arr[], Node root, int i, int n)
  {
    if (i < n)
    {
      Node temp = new Node(arr[i]);
      root = temp;
      root.leftChild = insertLevelOrder(arr, root.leftChild, 2 * i + 1, n);
      root.rightChild = insertLevelOrder(arr, root.rightChild, 2 * i + 2, n);
    }
    return root;
  }

  static Node buildTree(int t[], int n)
  {
    Node node = null;
    node = insertLevelOrder(t, node, 0, n);
    return node;
  }
  public static void main(String[] args)
  {
    int a[]=new int[10];
    int n, i;
    Scanner s=new Scanner(System.in);
    n = Integer.parseInt(s.nextLine());
    for(i=0;i<n;i++)
      a[i] = s.nextInt();
    Node root = null;
    if(n!=0)
      root = buildTree(a, n);
    System.out.println(Result.isFoldable(root));
  }
}
